import matplotlib.pyplot as plt
import os
import random
import statistics
# Initializing variables outside of loops
cost1 = 1
cost2 = 10
daily_total_cost = []
dtc_dic = {}
trial_number = 0

for j in range(1, 1000000):
    # Initializing variables inside of trials that need to be refreshed each trial
    cost_p1 = 0
    p2_count = 0
    cost_p2 = 0
    total_cost = 0

    for i in range(1, 201):
        rando = random.randint(1, 400)      # generates a random parking spot
        if p2_count < 100 and rando > 300:      # condition for park spots 301-400; prevents more than 100 cars in lot 2
            p2_count += 1
            total_cost += 10
        else:
            total_cost += 1
    daily_total_cost.append(total_cost)     # adds daily revenue to list
    trial_number += 1
daily_total_cost.sort()     # sorts list
mode = statistics.mode(daily_total_cost)        # calculates mode
mean = statistics.mean(daily_total_cost)        # calculates mean
median = statistics.median(daily_total_cost)    # calculates median

# print(f"Mode: {mode}, Mean: {mean}, Median: {median}")
for item in daily_total_cost:   # creates a dictionary of total costs
    if item in dtc_dic:
        dtc_dic[item] += 1
    else:   # Condition to create a key if it doesn't already exist
        dtc_dic[item] = 1
print(dtc_dic)

# Initializing variables to graph
prob_dic = {}
tot_prob = 0
x = []
y = []
for key in dtc_dic:
    prob = dtc_dic[key]/trial_number    # Calculating probability
    prob_dic[key] = float("{:.3f}".format(prob))    # Adding probability to dictionary
    x.append(key)
    y.append(prob)
    tot_prob += prob    # Makes sure the total probability is 1

# print(prob_dic)
# print(f"Total Probability: {tot_prob}")
# print(y)
# print(x)
# Plots The Daily Revenue vs. Probability of Revenue
fig = plt.figure()
plt.plot(x, y, 'b-', label='Prices')
plt.plot(mode, prob_dic[mode], 'r*', label=f'Mode: {mode}')
plt.plot(median, prob_dic[median], 'k*', label=f'Median: {median}')
plt.vlines(x=mean, ymin=0, ymax=prob_dic[mode], colors="g", label=f'Mean: {mean:.2f}')
plt.xlabel('Daily Revenue')
plt.ylabel('Probability of Daily Revenue')
plt.legend()
plt.title('Daily Revenue vs Probability of Daily Revenue')
plt.tight_layout()
plt.grid(True, lw=1.0)
fig.savefig(os.path.join("data", "phys506.png"))
plt.show()
